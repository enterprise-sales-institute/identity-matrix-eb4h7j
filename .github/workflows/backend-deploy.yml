name: Backend Deploy

on:
  workflow_run:
    workflows: ["Backend CI"]
    types: [completed]
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  IMAGE_NAME: attribution-backend
  NODE_VERSION: '18.x'
  DEPLOYMENT_TIMEOUT: '1800'
  HEALTH_CHECK_INTERVAL: '10'

jobs:
  deploy_staging:
    name: Deploy to Staging
    environment: staging
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-session-name: GithubActionsDeployStaging

      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./src/backend/Dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
          sbom: true
          provenance: true

      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v4
        with:
          namespace: attribution-staging
          manifests: |
            infrastructure/kubernetes/backend/deployment.yaml
          images: |
            ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}
          strategy: canary
          action: deploy
          timeout: ${{ env.DEPLOYMENT_TIMEOUT }}
          kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}

      - name: Verify Deployment Health
        run: |
          kubectl rollout status deployment/attribution-backend -n attribution-staging --timeout=300s
          for i in {1..3}; do
            curl -f http://staging-backend/health || exit 1
            sleep ${{ env.HEALTH_CHECK_INTERVAL }}
          done

  deploy_production:
    name: Deploy to Production
    environment: production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: deploy_staging
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-session-name: GithubActionsDeployProduction

      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./src/backend/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:production-${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
          sbom: true
          provenance: true

      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v4
        with:
          namespace: attribution-prod
          manifests: |
            infrastructure/kubernetes/backend/deployment.yaml
          images: |
            ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:production-${{ github.sha }}
          strategy: blue-green
          action: deploy
          timeout: ${{ env.DEPLOYMENT_TIMEOUT }}
          kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}

      - name: Verify Deployment Health
        run: |
          kubectl rollout status deployment/attribution-backend -n attribution-prod --timeout=300s
          for i in {1..5}; do
            curl -f http://production-backend/health || exit 1
            sleep ${{ env.HEALTH_CHECK_INTERVAL }}
          done

      - name: Update Deployment Metrics
        if: always()
        run: |
          echo "DEPLOY_STATUS=${{ job.status }}" >> $GITHUB_ENV
          echo "DEPLOY_DURATION=${{ steps.deploy.outputs.duration }}" >> $GITHUB_ENV
          echo "DEPLOY_TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV